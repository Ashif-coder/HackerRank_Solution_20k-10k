#!/bin/python3

import math
import os
import random
import re
import sys
from collections import deque
#
# Complete the 'quickestWayUp' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. 2D_INTEGER_ARRAY ladders
#  2. 2D_INTEGER_ARRAY snakes
#

def quickestWayUp(ladders, snakes):
    ladder_map = {start: end for start, end in ladders}
    snake_map = {start: end for start, end in snakes}
    
    visited = set()
    
    queue = deque([(1, 0)])  # (cell, moves)
    
    while queue:
        cell, moves = queue.popleft()
        
        if cell == 100:
            return moves
        
        for roll in range(1, 7):
            new_cell = cell + roll
            
            if new_cell <= 100:
                if new_cell in ladder_map:
                    new_cell = ladder_map[new_cell]
                
                if new_cell in snake_map:
                    new_cell = snake_map[new_cell]
                
                # Check if the new cell is visited
                if new_cell not in visited:
                    visited.add(new_cell)
                    queue.append((new_cell, moves + 1))
    
    return -1

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input().strip())

    for t_itr in range(t):
        n = int(input().strip())

        ladders = []

        for _ in range(n):
            ladders.append(list(map(int, input().rstrip().split())))

        m = int(input().strip())

        snakes = []

        for _ in range(m):
            snakes.append(list(map(int, input().rstrip().split())))

        result = quickestWayUp(ladders, snakes)

        fptr.write(str(result) + '\n')

    fptr.close()
